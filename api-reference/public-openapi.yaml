openapi: 3.0.0
info:
  title: Pauls Job Public Endpoints
  description: >-
    #### **Description:**


    This API provides a comprehensive suite of endpoints for managing user
    authentication, session control, and other key functionalities within the
    application for Pauls Job. The endpoints are designed to ensure secure and
    efficient communication between clients and the server, offering robust
    access control mechanisms through token-based authentication.


    #### **Key Features:**


    - **Authentication:** Allows users to securely log in using their
    credentials and receive a token for accessing protected resources.
        
    - **Session Management:** Provides a logout mechanism to securely end user
    sessions and invalidate tokens.
        
    - **Error Handling:** Clear and descriptive error messages ensure that
    issues such as invalid credentials, expired tokens, or missing parameters
    are easily identifiable.
        

    This API is built with a focus on security and ease of use, making it
    essential for integrating user authentication and session management into
    applications while maintaining a high standard of data protection.
  version: 1.0.0
servers:
  - url: https://staging-api.hyrd.de
  - url: https://api.hyrd.de
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Users
    description: >-
      #### **Description:**


      The folder contains the foundational information and essential API
      endpoints for starting with the authentication and session management of
      the application. This includes the critical login and logout
      functionalities, which are necessary for users to authenticate and manage
      their sessions securely.


      #### **APIs Included:**


      1. **Login API**: Allows users to log in by providing their credentials
      and receive an authentication token.
          
      2. **Logout API**: Enables users to log out by invalidating the token and
      ending their session.
          

      These endpoints are designed to facilitate secure access control and
      session handling, making them an essential starting point for any
      interaction with the platform's protected resources.
  - name: General
  - name: Company
  - name: Company > Candidate
  - name: Company > Api Integrations
paths:
  /v1/login:
    post:
      tags:
        - Users
      summary: Login
      description: >-
        ### **Login API Documentation**


        #### **API Overview**


        - **Name:** Login API
            
        - **Description:** This API endpoint allows users to log in by providing
        their credentials (username/email and password).
            
        - **Method:** `POST`
            
        - **Endpoint URL:** `/v1/login`
            

        ### **Authentication**


        - No authentication is required to access this endpoint, as this is the
        login process.
            

        ### **Request**


        #### **HTTP Method:**


        - `POST`
            

        #### **URL:**


        - `/v1/login`
            

        #### **Headers:**


        | Header Name | Description | Required | Example |

        | --- | --- | --- | --- |

        | `Content-Type` | The content type of the request | Yes |
        `application/json` |

        | `Accept` | Expected response format | No | `application/json` |


        #### **Request Body:**


        The request body should be sent in JSON format with the following
        parameters:


        | Field Name | Data Type | Description | Required | Example |

        | --- | --- | --- | --- | --- |

        | `email` | `string` | The email of the user | Yes |
        `"user@example.com"` |

        | `password` | `string` | The password of the user | Yes |
        `"yourpassword123"` |


        ### **Responses**


        #### **Success Response:**


        - **Status Code:** `200 OK`
            
        - **Message:** `Success`
            
        - **Data:** `User object`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                user:
                  login: john.doe@yopmail.com
                  password: yourpassword123
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Wed, 27 Mar 2024 12:01:06 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Connection:
              schema:
                type: string
                example: keep-alive
            Cache-Control:
              schema:
                type: string
                example: no-cache
            X-Request-Id:
              schema:
                type: string
                example: aedccec59e1d82941db9f4c38f8a4cf9
            X-Runtime:
              schema:
                type: number
                example: '0.050598'
            vary:
              schema:
                type: string
                example: Origin
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=15724800; includeSubDomains
          content:
            application/json:
              schema:
                type: object
              example:
                error: Invalid Login or password.
  /v1/logout:
    delete:
      tags:
        - Users
      summary: Log out
      description: >-
        ### **Logout API Documentation**


        #### **API Overview**


        - **Name:** Logout API
            
        - **Description:** This API endpoint allows users to log out by
        invalidating their session or token.
            
        - **Method:** `Delete`
            
        - **Endpoint URL:** `/v1/logout`
            

        ### **Authentication**


        - **Authentication Required:** Yes
            
        - The user must be authenticated (i.e., must include a valid token) to
        successfully log out.
            

        ### **Request**


        #### **HTTP Method:**


        - `Delete`
            

        #### **URL:**


        - `/v1/logout`
            

        #### **Headers:**


        | Header Name | Description | Required | Example |

        | --- | --- | --- | --- |

        | `Authorization` | Bearer token used to authenticate the user | Yes |
        `Bearer` |

        | `Content-Type` | The content type of the request | No |
        `application/json` |


        **Note:** The token should be passed in the `Authorization` header as a
        Bearer token.


        #### **Request Body:**


        No request body is necessary for this endpoint.


        ### **Responses**


        #### **Success Response:**


        - **Status Code:** `200 OK`
            

        If the logout is successful, the response confirms that the user has
        been logged out.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{Bearer Token}}
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Wed, 27 Mar 2024 12:08:43 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Connection:
              schema:
                type: string
                example: keep-alive
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            Referrer-Policy:
              schema:
                type: string
                example: strict-origin-when-cross-origin
            Set-Cookie:
              schema:
                type: string
                example: >-
                  _interslice_session=w%2FKBLc7%2FQz2rwj%2BBciWaZy36quGaI9d3S2zfML%2BQ7ro8W1eY%2BQwPvy%2BeC8HzSjjqsNUzSI%2BB7QxFgQAjp08m9%2BUHfdE96FDNyw27Awii2EKiXUCgO3W0rSwu627KnV0j09%2BxQpTcPiQQEwfSlVwZ1D4FNJYvd5aWopc5XyGcbtCpBICR7Ie4R3hCpA%3D%3D--l6ZTb%2BKPAwv9n2Ci--mhnvIWMgTysmz0HjFORCJA%3D%3D;
                  path=/; HttpOnly; SameSite=Lax
            ETag:
              schema:
                type: string
                example: W/"0cb859d39dbb161bffef86ac71f21443"
            Cache-Control:
              schema:
                type: string
                example: max-age=0, private, must-revalidate
            X-Request-Id:
              schema:
                type: string
                example: d7d56f2a86b29c58641e422d780e517e
            X-Runtime:
              schema:
                type: number
                example: '0.006202'
            vary:
              schema:
                type: string
                example: Origin
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=15724800; includeSubDomains
          content:
            application/json:
              schema:
                type: object
              example:
                message: logged out successfully
                status: 200
  /v1/general/job-types:
    get:
      tags:
        - General
      summary: Job Types
      description: |-
        ### Retrieve Job Types

        This endpoint makes an HTTP GET request to retrieve a list of job types.

        #### Request

        - Method: GET
            
        - URL: `/v1/general/job-types`
            

        #### Response

        - Status: 200
            
        - Content-Type: application/json
            

        Example response body:

        ``` json
        {
            "message":"Success",
            "status":200,
            "data":[
                {
                    "id": 1,
                    "name_ger":"Praktikant",
                    "name_eng":"Internship"
                }
            ]
        }

         ```
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Success
                status: 200
                data:
                  - id: 1
                    name_ger: Praktikant
                    name_eng: Internship
                  - id: 2
                    name_ger: Werkstudent
                    name_eng: Working student
                  - id: 3
                    name_ger: Trainee
                    name_eng: Trainee
                  - id: 7
                    name_ger: Duales Studium
                    name_eng: Dual studies
                  - id: 4
                    name_ger: Festanstellung
                    name_eng: Permanent position
                  - id: 8
                    name_ger: Referendariat
                    name_eng: Clerkship
                  - id: 5
                    name_ger: Bachelorarbeit (im Unternehmen)
                    name_eng: Bachelor thesis (in company)
                  - id: 6
                    name_ger: Masterarbeit (im Unternehmen)
                    name_eng: Master thesis (in company)
                  - id: 14
                    name_ger: Studentische Hilfskraft
                    name_eng: Student Resarch Assistant
                  - id: 15
                    name_ger: Wissenschaftlicher Mitarbeiter / Doktorand
                    name_eng: Research Assistant / PhD Student
                  - id: 9
                    name_ger: Teilzeit (befristet)
                    name_eng: Part-Time (fixed term)
                  - id: 10
                    name_ger: Vollzeit (befristet)
                    name_eng: Full-Time (fixed term)
  /v1/general/business-areas:
    get:
      tags:
        - General
      summary: Business Area Division
      description: >-
        ### Retrieve Business Area Division


        This endpoint makes an HTTP GET request to retrieve a list of Business
        area division.


        #### Request


        - Method: GET
            
        - URL: `/v1/general/business-areas`
            

        **Query**


        - lang: Optional | default de
            

        #### Response


        - Status: 200
            
        - Content-Type: application/json
            

        Example response body:


        ``` json

        {
            "message":"Success",
            "status":200,
            "data":[
                {
                    "id": 1,
                    "name":"Shop"
                }
            ]
        }

         ```
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Success
                status: 200
                data:
                  - id: 1
                    name: Einkauf & Verkauf
                    area:
                      - id: 1
                        name: Einkauf
                      - id: 2
                        name: Kundenservice
                      - id: 3
                        name: Sales
                  - id: 2
                    name: Management & Organisation
                    area:
                      - id: 4
                        name: Management & Strategie
                      - id: 5
                        name: Business Development
                      - id: 6
                        name: Organisation & Infrastructure
                      - id: 7
                        name: Human Resources
                  - id: 3
                    name: Marketing & Kommunikation
                    area:
                      - id: 8
                        name: Kommunikation / PR / Events
                      - id: 9
                        name: Marketing & Online-Marketing
                  - id: 4
                    name: Finanzen & Buchhaltung
                    area:
                      - id: 16
                        name: Accounting
                      - id: 17
                        name: Controlling
                      - id: 18
                        name: Finanzierung & Treasury
                      - id: 19
                        name: Steuern
                      - id: 15
                        name: Audit & Wirtschaftsprüfung
                  - id: 5
                    name: Consulting
                    area:
                      - id: 13
                        name: Technische Beratung
                      - id: 14
                        name: Steuerberatung
                      - id: 11
                        name: IT Beratung
                      - id: 10
                        name: Unternehmensberatung
                      - id: 12
                        name: Personalberatung
                  - id: 6
                    name: Banken & Vermögensverwaltung
                    area:
                      - id: 20
                        name: Asset Management
                      - id: 21
                        name: Bank Treasury
                      - id: 22
                        name: Corporate Banking
                      - id: 23
                        name: Financial Technology
                      - id: 24
                        name: Investment Banking & Corporate Finance
                      - id: 26
                        name: Private Wealth Management
                      - id: 28
                        name: Research
                      - id: 29
                        name: Retail Banking
                      - id: 30
                        name: Risk Management
                      - id: 31
                        name: Transaction Banking
                      - id: 32
                        name: Transactions &  Operations
                      - id: 25
                        name: Capital Markets
                      - id: 27
                        name: Projektfinanzierung & Spezialfinanzierung
                  - id: 7
                    name: Versicherungswesen & Finanzdienstleistung
                    area:
                      - id: 33
                        name: Zentralbank & Bankenaufsicht
                      - id: 34
                        name: Finanzdienstleistung
                      - id: 35
                        name: 'Aktuariat & Insurance Risk Management '
                      - id: 36
                        name: 'Schadensregulierung & Specialist '
                      - id: 37
                        name: Sales & Salessupport
                  - id: 8
                    name: Jura & Rechtswesen
                    area:
                      - id: 38
                        name: Arbeitsrecht
                      - id: 39
                        name: Bank- & Finanzrecht
                      - id: 40
                        name: Compliance
                      - id: 41
                        name: Gesellschaftsrecht
                      - id: 44
                        name: Kartellrecht & Wettbewerbsrecht
                      - id: 45
                        name: M&A / IPO / Wertpapierrecht
                      - id: 46
                        name: Markenrecht
                      - id: 47
                        name: Nachfolge / Vermögen / Stiftungen
                      - id: 48
                        name: Notariat
                      - id: 49
                        name: Patentrecht
                      - id: 50
                        name: PE & VC
                      - id: 51
                        name: Wirtschafts- & Steuerstrafrecht
                      - id: 52
                        name: Dispute Resolution
                      - id: 53
                        name: Verwaltungsrecht
                      - id: 54
                        name: Steuerrecht
                      - id: 55
                        name: Strafrecht
                      - id: 56
                        name: Energierecht / Gesundheitsrecht / Lebensmittelrecht
                      - id: 57
                        name: Umweltrecht
                      - id: 58
                        name: Technologie & Medien
                      - id: 59
                        name: Versicherungsrecht
                      - id: 60
                        name: Vertrieb / Handel / Logistik
                      - id: 42
                        name: Immobilien- & Baurecht
                      - id: 43
                        name: Insolvenzrecht und Restrukturierung
                  - id: 9
                    name: Startups & Digitalisierung
                    area:
                      - id: 61
                        name: Startup
                      - id: 62
                        name: Technologie & Digitalisierung
                  - id: 10
                    name: IT & Softwareentwicklung
                    area:
                      - id: 63
                        name: Hardware
                      - id: 64
                        name: IT Projekt- & Produktmanagement
                      - id: 65
                        name: Infrastruktur / Netzwerke / Telekom
                      - id: 66
                        name: Softwareentwicklung
                      - id: 67
                        name: Web Design
                  - id: 11
                    name: Ingenieurwesen & Technik
                    area:
                      - id: 68
                        name: Architektur & Stadtplanung
                      - id: 69
                        name: Automatisierungstechnik
                      - id: 70
                        name: Bauingenieurwesen
                      - id: 71
                        name: Biotechnologie
                      - id: 72
                        name: Chemieingenieurwesen
                      - id: 73
                        name: Elektrotechnik
                      - id: 74
                        name: Energie- & Umwelttechnik
                      - id: 75
                        name: Fahrzeugtechnik
                      - id: 76
                        name: Informationstechnik
                      - id: 77
                        name: Luft- & Raumfahrttechnik
                      - id: 78
                        name: Maschinenbau
                      - id: 79
                        name: Mechatronik
                      - id: 80
                        name: Verfahrenstechnik
                      - id: 81
                        name: Weitere Ingenieurwissenschaften
                      - id: 82
                        name: Werkstofftechnik
                      - id: 83
                        name: Technischer Vertrieb
                      - id: 84
                        name: Entwicklung
                      - id: 85
                        name: Konstruktion
                      - id: 86
                        name: Produktion
                      - id: 88
                        name: Qualität & Instandhaltung
                      - id: 87
                        name: Logistik & Supply Chain
                  - id: 12
                    name: Naturwissenschaften
                    area:
                      - id: 89
                        name: Biologie
                      - id: 90
                        name: Mathematik
                      - id: 91
                        name: Chemie
                      - id: 92
                        name: Physik
                      - id: 93
                        name: Forschung
                      - id: 94
                        name: Energie & Rohstoffe
                      - id: 102
                        name: Agrar
                      - id: 103
                        name: Hotellier
                  - id: 13
                    name: Design, Gestaltung & Medien
                    area:
                      - id: 96
                        name: Journalismus & Verlagswesen
                      - id: 97
                        name: Film / Funk / Fernsehen
                      - id: 95
                        name: Design / Gestaltung / Mode
                  - id: 14
                    name: Gesundheit
                    area:
                      - id: 98
                        name: Medizin & Psychologie
                      - id: 99
                        name: Pharma
                  - id: 15
                    name: Öffentlicher Sektor
                    area:
                      - id: 100
                        name: Verwaltung
                  - id: 16
                    name: Bildung & Soziales
                    area:
                      - id: 101
                        name: Bildung & Soziales
  /v1/general/university-degrees:
    get:
      tags:
        - General
      summary: University Degree
      description: >-
        ### Retrieve University


        This endpoint makes an HTTP GET request to retrieve a list of university
        degree.


        #### Request


        - Method: GET
            
        - URL: `/v1/general/university-degree`
            

        **Query**


        - lang: Optional | default de
            

        #### Response


        - Status: 200
            
        - Content-Type: application/json
            

        Example response body:


        ``` json

        {
            "message":"Success",
            "status":200,
            "data":[
                {
                    "id": 1,
                    "name":"Bachelor of science"
                }
            ]
        }

         ```
      parameters:
        - name: lang
          in: query
          schema:
            type: string
          example: en
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Success",
                    "status": 200,
                    "data": [
                        {
                            "id": 1,
                            "value": "Bachelor of Arts"
                        },
                        {
                            "id": 2,
                            "value": "Bachelor of Science"
                        },
                        {
                            "id": 3,
                            "value": "Bachelor of Engineering"
                        },
                        {
                            "id": 4,
                            "value": "Bachelor of Laws"
                        },
                        {
                            "id": 5,
                            "value": "Bachelor of Education"
                        },
                        {
                            "id": 6,
                            "value": "Bachelor of Music"
                        },
                        {
                            "id": 7,
                            "value": "Bachelor of Fine Arts"
                        },
                        {
                            "id": 8,
                            "value": "Bachelor of Musical Arts"
                        },
                        {
                            "id": 9,
                            "value": "Master of Arts"
                        },
                        {
                            "id": 10,
                            "value": "Master of Science"
                        },
                        {
                            "id": 11,
                            "value": "Master of Engineering"
                        },
                        {
                            "id": 12,
                            "value": "Master of Laws"
                        },
                        {
                            "id": 13,
                            "value": "Master of Education"
                        },
                        {
                            "id": 14,
                            "value": "Master of Music"
                        },
                        {
                            "id": 15,
                            "value": "Master of Fine Arts"
                        },
                        {
                            "id": 16,
                            "value": "Master of Musical Arts"
                        },
                        {
                            "id": 17,
                            "value": "Magister Artium"
                        },
                        {
                            "id": 18,
                            "value": "Magister Legum"
                        },
                        {
                            "id": 19,
                            "value": "Erstes Staatsexamen"
                        },
                        {
                            "id": 20,
                            "value": "Zweites Staatsexamen"
                        },
                        {
                            "id": 21,
                            "value": "Promotion"
                        },
                        {
                            "id": 22,
                            "value": "MBA"
                        },
                        {
                            "id": 23,
                            "value": "Diplom"
                        },
                        {
                            "id": 24,
                            "value": "Vollzeit"
                        }
                    ]
                }
  /gin/v1/company/candidate:
    post:
      tags:
        - Company > Candidate
      summary: Add candidate system data
      description: >-
        ### POST /gin/v1/company/candidate


        This endpoint allows the addition of a candidate to a company based on
        Company Id or authorization api key


        #### Request Body


        - `phone` (string, optional): The phone number of the candidate.
        (Required if email is missing)
            
        - `email` (string, optional): The email address of the candidate.
        (Required if phone is missing)
            

        #### Response


        The response for this request can be represented as a JSON schema:


        ``` json

        {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "properties": {
                        "slug": {
                            "type": "string"
                        }
                    }
                }
            }
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                phone: ''
                email: sondh1110003@yopmail.com
      security:
        - noauthAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{company-api-key}}'
        - name: Authorization
          in: header
          schema:
            type: string
          example: testo
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Candidate input successfully",
                    "status": "success",
                    "data": {
                        "slug": "335516d7-d3ed-4fce-924d-237d07832d58"
                    }
                }
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 400 Failed validation
                  value:
                    code: 3
                    message: 'Failed to input candidate: email or phone must be filled'
                    details: []
                example-1:
                  summary: 400 Wrong email
                  value:
                    code: 3
                    message: 'Failed to input candidate: email must be correct format'
                    details: []
                example-2:
                  summary: 400 Wrong phone number
                  value:
                    code: 3
                    message: >-
                      Failed to input candidate: phone must be start with + and
                      digit only
                    details: []
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 401 Unauthorized
                  value:
                    code: 16
                    message: token not provided
                    details: []
                example-1:
                  summary: 401 not matched company id
                  value:
                    code: 16
                    message: invalid company ID format
                    details: []
    put:
      tags:
        - Company > Candidate
      summary: Update Candidate data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                user_slug: 39c12359-7eaf-407d-9be7-97f522a1e7f2
                email: mamamia@yopmail.com
                first_name: Prayogi
                last_name: Fikri
                city: Bekasi
                street: 456 Cedar Ave
                zip_code: '12345'
                phone: '+101912919'
                birthday: null
                whatsapp_preference: false
                sms_preference: false
                email_preference: false
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{company-api-key}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /gin/v1/company/candidate/upload-candidate-data:
    post:
      tags:
        - Company > Candidate
      summary: Fill Candidate data
      description: >-
        This endpoint allows the user to upload candidate data to the company's
        system. The request should be sent as an HTTP POST to the
        {{Staging_API}}/gin/v1/company/candidate/upload-candidate-data URL.


        ### Request Body


        The request body should be in the raw format and include the following
        parameters:


        - `system`: An object containing the candidate's email and phone
        information.
            
            - `email`: The candidate's email address.
                
            - `phone`: The candidate's phone number.
                
        - `user`: An object containing the candidate's personal information.
            
            - `email`: The candidate's email address.
                
            - `first_name`: The candidate's first name.
                
            - `last_name`: The candidate's last name.
                
            - `city`: The candidate's city of residence.
                
            - `street`: The candidate's street address.
                
            - `zip_code`: The candidate's zip code.
                
            - `phone`: The candidate's phone number.
                
            - `birthday`: The candidate's date of birth.
                
            - `whatsapp_preference`: The candidate's preference for WhatsApp communication.
                
            - `sms_preference`: The candidate's preference for SMS communication.
                
            - `email_preference`: The candidate's preference for email communication.
                
        - `job_experiences`: An array containing the candidate's job
        experiences.
            
        - `universities`: An array containing the candidate's university
        information.
            
        - `it_skills`: An array containing the candidate's IT skills.
            
        - `hobbies`: An array containing the candidate's hobbies.
            
        - `other`: An array containing any other relevant information.
            
        - `joining_talent_community_ids`: An array containing the candidate's
        talent community IDs.
            
            - `channel`: The channel ID.
                
            - `tc_id`: The talent community ID.
                

        ### Response


        The response received has the following JSON schema:


        ``` json

        {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "status": {
              "type": "integer"
            }
          }
        }

         ```

        The last execution of this request returned a 404 status code with an
        empty message and a status value of 0 in the response.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                system:
                  email: yokata1@yopmail.com
                  phone: ''
                user:
                  email: yokata2@yopmail.com
                  first_name: Emily
                  last_name: Smithdaughter
                  city: Bekasi
                  street: 456 Cedar Ave
                  zip_code: '12345'
                  phone: '+101912919'
                  birthday: null
                  whatsapp_preference: false
                  sms_preference: false
                  email_preference: false
                job_experiences: []
                universities: []
                it_skills: []
                hobbies: []
                other: []
                joining_talent_community_ids:
                  - channel: 4411aa5d
                    tc_id: 354
      parameters:
        - name: x-company-api-key
          in: header
          schema:
            type: string
          example: 555be1b3-c2f5-4cc4-aab7-de051ec501e4
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /gin/v1/company/candidate/job:
    post:
      tags:
        - Company > Candidate
      summary: Add candidate job
      description: >-
        ### Create Company Candidate Job


        This endpoint allows the creation of a new job for a candidate within a
        company.


        #### Request Body


        - `user_slug` (string): The unique identifier of the user.
            
        - `company_name` (string, required): The name of the company.
            
        - `start_date` (string, required): The start date of the job.
            
        - `end_date` (string, optional): The end date of the job.
            
        - `city_name` (string): The name of the city.
            
        - `job_type_id` (integer): The ID representing the type of job.
            
        - `description` (string): A brief description of the job.
            
        - `job_title` (string): The title of the job.
            
        - `business_area_division` (string): The division or area of the
        business.
            
        - `lang` (string): The language used for the job details.
            

        #### Response


        - `message` (string): A message related to the request.
            
        - `status` (integer): The status of the request.
            

        Example:


        ``` json

        {
            "user_slug": "39c12359-7eaf-407d-9be7-97f522a1e7f2",
            "company_name": "Shopee",
            "start_date": "01-03-2024",
            "end_date": "",
            "city_name": "Batam",
            "job_type_id": 2,
            "description": "Cuman budak",
            "job_title": "QA tester",
            "business_area_division": "Consulting",
            "lang": "de"
        }

         ```

        ``` json

        {
            "message": "success",
            "status": 201
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "user_slug": "39c12359-7eaf-407d-9be7-97f522a1e7f2",
                    "company_name": "Shopee", // required
                    "start_date": "01-13-2024", //required
                    "end_date": "", // required,
                    "city_name": "Batam",
                    "job_type_id": 2,
                    "description": "Cuman budak",
                    "job_title": "QA tester",
                    "business_area_division": "Consulting",
                    "lang": "de"
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{company-api-key}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/company/api-integrations:
    get:
      tags:
        - Company > Api Integrations
      summary: Get List API integrations
      description: |-
        ### Retrieve Data

        This endpoint allows you to retrieve the data.

        #### Request Body

        This request does not require a request body.

        #### Response Body

        The response will contain the data requested.

        ``` json
        {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }

         ```
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Success
                status: 200
                data:
                  - id: 1
                    value: 336cdcd4-e7bd-40b9-bfb5-ccd85cb8282b
    post:
      tags:
        - Company > Api Integrations
      summary: Create API Keys
      description: >-
        ### POST /v1/company/api-integrations


        This endpoint is used to create a new API integration for the company.


        #### Request Body


        - No request body parameters are required for this endpoint.
            

        #### Response


        The response for this request will be in JSON format with the following
        schema:


        ``` json

        {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "data": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        }

         ```

        The response will include:


        - `message`: A string indicating the status message.
            
        - `status`: An integer representing the status of the request.
            
        - `data`: An object containing the `id` and `value` of the newly created
        API integration.
            

        #### Example Response


        ``` json

        {
            "message": "",
            "status": 0,
            "data": {
                "id": 0,
                "value": ""
            }
        }

         ```
      requestBody:
        content: {}
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Success
                status: 200
                data:
                  id: 6
                  value: 31c9acca-7075-4bdb-bf83-ff4994843abb
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: You are not authorized
                status: 401
  /v1/company/api-integrations/{api-key-id}:
    delete:
      tags:
        - Company > Api Integrations
      summary: Delete API Keys
      description: >-
        This endpoint allows you to delete a specific API integration for a
        company using the provided API key ID.


        ### Request Body


        This request does not require a request body.


        ### Response


        - `message` (string): A message indicating the result of the operation.
            
        - `status` (integer): A status code indicating the outcome of the
        request.
            
        - `data` (object, optional): Additional data related to the operation,
        if available. In the provided example, it includes a variable field.
            

        #### Example Response


        ``` json

        {
            "message": "Success",
            "status": 200
        }

         ```
      parameters:
        - name: api-key-id
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Success
                  value:
                    message: Success
                    status: 200
                example-1:
                  summary: Api Key not found
                  value:
                    message: Api Key könnte nicht gefunden werden
                    status: 404
                    data:
                      variable: Api Key
