openapi: 3.0.0
info:
  title: Pauls Job Public Endpoints
  version: 1.0.0
servers:
  - url: https://api.hyrd.de
tags:
  - name: Users
paths:
  /v1/login:
    post:
      tags:
        - Users
      summary: Login
      description: >-
        ### **Login API Documentation**


        #### **API Overview**


        - **Name:** Login API
            
        - **Description:** This API endpoint allows users to log in by providing
        their credentials (username/email and password).
            
        - **Method:** `POST`
            
        - **Endpoint URL:** `/v1/login`
            

        ### **Authentication**


        - No authentication is required to access this endpoint, as this is the
        login process.
            

        ### **Request**


        #### **HTTP Method:**


        - `POST`
            

        #### **URL:**


        - `/v1/login`
            

        #### **Headers:**


        | Header Name | Description | Required | Example |

        | --- | --- | --- | --- |

        | `Content-Type` | The content type of the request | Yes |
        `application/json` |

        | `Accept` | Expected response format | No | `application/json` |


        #### **Request Body:**


        The request body should be sent in JSON format with the following
        parameters:


        | Field Name | Data Type | Description | Required | Example |

        | --- | --- | --- | --- | --- |

        | `email` | `string` | The email of the user | Yes |
        `"user@example.com"` |

        | `password` | `string` | The password of the user | Yes |
        `"yourpassword123"` |


        ### **Responses**


        #### **Success Response:**


        - **Status Code:** `200 OK`
            
        - **Message:** `Success`
            
        - **Data:** `User object`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                user:
                  login: john.doe@yopmail.com
                  password: yourpassword123
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Wed, 27 Mar 2024 12:01:06 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Connection:
              schema:
                type: string
                example: keep-alive
            Cache-Control:
              schema:
                type: string
                example: no-cache
            X-Request-Id:
              schema:
                type: string
                example: aedccec59e1d82941db9f4c38f8a4cf9
            X-Runtime:
              schema:
                type: number
                example: '0.050598'
            vary:
              schema:
                type: string
                example: Origin
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=15724800; includeSubDomains
          content:
            application/json:
              schema:
                type: object
              example:
                error: Invalid Login or password.
  /v1/logout:
    delete:
      tags:
        - Users
      summary: Log out
      description: >-
        ### **Logout API Documentation**


        #### **API Overview**


        - **Name:** Logout API
            
        - **Description:** This API endpoint allows users to log out by
        invalidating their session or token.
            
        - **Method:** `Delete`
            
        - **Endpoint URL:** `/v1/logout`
            

        ### **Authentication**


        - **Authentication Required:** Yes
            
        - The user must be authenticated (i.e., must include a valid token) to
        successfully log out.
            

        ### **Request**


        #### **HTTP Method:**


        - `Delete`
            

        #### **URL:**


        - `/v1/logout`
            

        #### **Headers:**


        | Header Name | Description | Required | Example |

        | --- | --- | --- | --- |

        | `Authorization` | Bearer token used to authenticate the user | Yes |
        `Bearer` |

        | `Content-Type` | The content type of the request | No |
        `application/json` |


        **Note:** The token should be passed in the `Authorization` header as a
        Bearer token.


        #### **Request Body:**


        No request body is necessary for this endpoint.


        ### **Responses**


        #### **Success Response:**


        - **Status Code:** `200 OK`
            

        If the logout is successful, the response confirms that the user has
        been logged out.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{Bearer Token}}
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Wed, 27 Mar 2024 12:08:43 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Connection:
              schema:
                type: string
                example: keep-alive
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            Referrer-Policy:
              schema:
                type: string
                example: strict-origin-when-cross-origin
            Set-Cookie:
              schema:
                type: string
                example: >-
                  _interslice_session=w%2FKBLc7%2FQz2rwj%2BBciWaZy36quGaI9d3S2zfML%2BQ7ro8W1eY%2BQwPvy%2BeC8HzSjjqsNUzSI%2BB7QxFgQAjp08m9%2BUHfdE96FDNyw27Awii2EKiXUCgO3W0rSwu627KnV0j09%2BxQpTcPiQQEwfSlVwZ1D4FNJYvd5aWopc5XyGcbtCpBICR7Ie4R3hCpA%3D%3D--l6ZTb%2BKPAwv9n2Ci--mhnvIWMgTysmz0HjFORCJA%3D%3D;
                  path=/; HttpOnly; SameSite=Lax
            ETag:
              schema:
                type: string
                example: W/"0cb859d39dbb161bffef86ac71f21443"
            Cache-Control:
              schema:
                type: string
                example: max-age=0, private, must-revalidate
            X-Request-Id:
              schema:
                type: string
                example: d7d56f2a86b29c58641e422d780e517e
            X-Runtime:
              schema:
                type: number
                example: '0.006202'
            vary:
              schema:
                type: string
                example: Origin
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=15724800; includeSubDomains
          content:
            application/json:
              schema:
                type: object
              example:
                message: logged out successfully
                status: 200
